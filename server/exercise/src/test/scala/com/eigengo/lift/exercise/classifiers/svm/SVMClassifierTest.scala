package com.eigengo.lift.exercise.classifiers.svm

import breeze.linalg.{DenseVector, DenseMatrix}
import com.eigengo.lift.exercise.classifiers.svm.SVMClassifier.{SVMClassification, SVMScale}
import com.typesafe.config.ConfigFactory
import org.scalatest.{FlatSpec, Matchers}

class SVMClassifierTest extends FlatSpec with Matchers with SVMClassifier {

  "SVM preprocessing pipeline" should "load, transform and predict data" in {

    val input = DenseMatrix[(Double, Double, Double), Double](
      (-184, -136, -1056),
      (-240, -328, -1088),
    (-312, -488, -1064),
    ( -344, -576, -1000),
    (-360, -568, -976),
    (-432, -472, -936),
    (-552, -328, -864),
    (-728, -192, -856),
    ( -896, -88, -760),
    (1112, 272, 1056),
    ( 1160, 328, 1048),
    ( 1208, 352, 1056),
    ( 1288, 360, 1136),
    ( 1312, 352, 1200),
    ( 1368, 360, 1248),
    ( 1392, 360, 1256),
    ( 1368, 352, 1240),
    ( 1320, 368, 1240),
    ( 1256, 400, 1184),
    ( 1160, 480, 1104),
    ( 1088, 632, 1216),
    ( 1016, 760, 1456),
    ( 952, 784, 1672),
    ( 896, 800, 1904),
    ( 816, 824, 2048),
    ( 744, 832, 2000),
    ( 688, 864, 1872),
    ( 664, 928, 1728),
    ( 632, 968, 1624),
    ( 616, 952, 1576),
    ( 600, 864, 1552),
    ( 616, 744, 1512),
    ( 648, 640, 1480),
    ( 696, 560, 1408),
    ( 744, 496, 1368),
      (792, 472, 1328),
    (840, 464, 1272),
    (880, 464, 1216),
    (928, 464, 1152),
    (944, 472, 1128),
    (960, 488, 1168),
    (960, 488, 1216),
    (968, 488, 1240),
    (976, 488, 1216),
    (976, 496, 1232),
    (984, 496, 1232),
    (992, 488, 1192),
    (992, 456, 1184),
    (984, 424, 1176),
    (968, 400, 1144),
    (960, 408, 1144),
    (936, 408, 1128),
    ( 920, 392, 1120),
    ( 904, 368, 1136),
    (888, 336, 1160),
    (856, 296, 1184),
    (816, 264, 1168),
    (752, 256, 1160),
    (664, 232, 1136),
    (584, 240, 1056),
      (504, 248, 1040),
    (  424, 264, 1112),
    (  360, 256, 1016),
    (  296, 248, 952),
    (  240, 264, 928),
    (  176, 264, 864),
    (  128, 296, 824),
    (  88, 304, 768),
    (  48, 328, 728),
    (  16, 344, 736),
    (  -16, 320, 696),
    (  -64, 264, 600),
    (  -104, 208, 512),
    (  -152, 176, 536),
    (  -200, 152, 528),
    (  -248, 128, 512),
    (  -296, 80, 440),
    (  -360, 40, 320),
    (  -416, 24, 232),
    (  -472, 96, 136),
    (  -512, 176, 16),
    (  -552, 232, -40),
    (  -608, 256, -104),
    (  -664, 208, -152),
    (  -712, 136, -224),
      (-728, 48, -312),
    (  -736, -56, -400),
    (  -720, -160, -488),
    (  -704, -200, -536),
    (  -688, -200, -552),
    (  -696, -112, -544),
    (  -720, -32, -504),
    (  -728, 24, -456),
    (  -744, 24, -392),
    (  -760, 16, -296),
    (  -776, 32, -160),
    (  -800, 48, -80),
    (  -816, 48, -56),
    (  -808, 40, -32),
    (  -784, 72, 32),
    (  -784, 104, 64),
    (  -752, 144, 144),
    (  -736, 192, 216),
    (  -728, 232, 240),
    (  -728, 256, 280),
    (  -704, 288, 248),
    (  -672, 296, 280),
    (  -656, 304, 296),
    (  -616, 344, 400),
    (  -592, 360, 432),
      (-576, 360, 520),
    (  -560, 328, 576),
    (  -520, 288, 552),
    (  -512, 248, 488),
    (  -488, 232, 488),
    (  -440, 224, 552),
    (  -376, 248, 624),
    (  -304, 296, 808),
    (  -272, 296, 904),
    (  -256, 248, 888),
    (  -232, 168, 792),
    (  -208, 104, 688),
    (  -152, 88, 624),
    (  -80, 120, 768),
    (  -32, 160, 864),
    (  56, 184, 864),
    (  104, 160, 792),
    (  160, 168, 792),
    (  224, 168, 800),
    (  280, 192, 832),
    (  352, 216, 848),
    (  568, 224, 880),
    (  656, 224, 880),
    (  720, 240, 920),
    (  808, 280, 992),
      (888, 296, 1016),
    (  960, 312, 1120),
    (  1032, 352, 1280),
    (  1080, 352, 1312),
    (  1128, 344, 1352),
    (  1168, 352, 1352),
    (  1144, 360, 1296),
    (  1104, 360, 1208),
    (  1032, 416, 1168),
    (  936, 496, 1248),
    (  864, 592, 1304),
    (  784, 640, 1432),
    (  752, 656, 1560),
    (  736, 664, 1664),
    (  720, 712, 1720))

    val modelPath = "/models"
    val modelName = "svm-model-curl-features"
    val gesture = "curl"

    val fileParser = new SVMModelParser(gesture)(ConfigFactory.parseString(
      s"""
         |classification.model.path = "$modelPath"
         |classification.gesture.$gesture.model = "$modelName"
      """.stripMargin))

    val model = fileParser.model.get

    val result = predict(model, input, taylorRadialKernel())

    result should be(SVMClassification(0.5073253591156132,0.7896033000039053,0.21039669999609467))
  }

  "SVM preprocessing pipeline" should "transform the incomming data" in {
    val input = DenseMatrix((1d, 2d, 3d), (4d, 5d, 6d), (7d, 8d, 9d))
    val center = DenseVector[Double](1, 2, 3, 4, 5, 6, 7, 8, 9)
    val scale = DenseVector[Double](1, 2, 3, 4, 5, 6, 7, 8, 9)

    val result = preprocessingPipeline(input, Some(SVMScale(center, scale)))

    result should be(DenseVector(0.0, 1.0, 1.3333333333333333, -0.5, 0.0, 0.3333333333333333, -0.5714285714285714, -0.25, 0.0))
  }
}
